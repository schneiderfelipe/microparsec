satisfy	microparsec/internals.html#satisfy,,openArray[string]	internals: satisfy(p: char -&gt; bool; expected: openArray[string] = []): Parser[char]	
skip	microparsec/internals.html#skip,,openArray[string]	internals: skip(p: char -&gt; bool; expected: openArray[string] = []): Parser[void]	
satisfyWith	microparsec/internals.html#satisfyWith,,,openArray[string]	internals: satisfyWith[T](f: char -&gt; T; p: T -&gt; bool; expected: openArray[string] = []): Parser[\n    T]	
anyChar	microparsec/internals.html#anyChar	internals: anyChar	
ch	microparsec/internals.html#ch,char	internals: ch(c: char): Parser[char]	
notChar	microparsec/internals.html#notChar,char	internals: notChar(c: char): Parser[char]	
peekCh	microparsec/internals.html#peekCh,ParseState	internals: peekCh(state: ParseState): ParseResult[Option[char]]	
peekChF	microparsec/internals.html#peekChF,ParseState	internals: peekChF(state: ParseState): ParseResult[char]	
match	microparsec/internals.html#match,Parser[T]	internals: match[T](parser: Parser[T]): Parser[(string, T)]	
